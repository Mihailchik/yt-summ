import time
import sys
import os
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import telegram_input
import telegram_output
import url_queue
import yt_processor
import log_mod

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    import yaml
    from pathlib import Path
    
    config_path = Path(__file__).parent.parent / "config_prod" / "app.yaml"
    with open(config_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def send_telegram_summaries(config: Dict[str, Any], chat_id: int, summaries: Dict[str, str], 
                           run_id: int, log_func=None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 4 —Å–∞–º–º–∞—Ä–∏ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    
    Args:
        config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        summaries: —Å–ª–æ–≤–∞—Ä—å —Å —Å–∞–º–º–∞—Ä–∏ (short, middle, full, resources)
        run_id: –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏
        log_func: —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    success = True
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
    short_summary = summaries.get('short', '')
    if short_summary:
        short_msg = f"<b>–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:</b>\n\n{short_summary}"
        if not telegram_output.send_telegram_message(config, chat_id, short_msg, log_func):
            success = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Å–∞–º–º–∞—Ä–∏
    middle_summary = summaries.get('middle', '')
    if middle_summary:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        middle_parts = telegram_output.split_long_message(middle_summary, max_length=4000)
        for i, part in enumerate(middle_parts):
            if len(middle_parts) > 1:
                middle_msg = f"<b>–°—Ä–µ–¥–Ω–µ–µ —Å–∞–º–º–∞—Ä–∏ (—á–∞—Å—Ç—å {i+1}/{len(middle_parts)}):</b>\n\n{part}"
            else:
                middle_msg = f"<b>–°—Ä–µ–¥–Ω–µ–µ —Å–∞–º–º–∞—Ä–∏:</b>\n\n{part}"
            if not telegram_output.send_telegram_message(config, chat_id, middle_msg, log_func):
                success = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
    full_summary = summaries.get('full', '')
    if full_summary:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        full_parts = telegram_output.split_long_message(full_summary, max_length=4000)
        for i, part in enumerate(full_parts):
            if len(full_parts) > 1:
                full_msg = f"<b>–ü–æ–ª–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ (—á–∞—Å—Ç—å {i+1}/{len(full_parts)}):</b>\n\n{part}"
            else:
                full_msg = f"<b>–ü–æ–ª–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:</b>\n\n{part}"
            if not telegram_output.send_telegram_message(config, chat_id, full_msg, log_func):
                success = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    resources = summaries.get('resources', '')
    if resources:
        resources_msg = f"<b>–†–µ—Å—É—Ä—Å—ã:</b>\n\n{resources}"
        if not telegram_output.send_telegram_message(config, chat_id, resources_msg, log_func):
            success = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    final_msg = f"‚úÖ –í—Å–µ —Å–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
    telegram_output.send_telegram_message(config, chat_id, final_msg, log_func)
    
    if log_func:
        if success:
            log_func("INFO", "telegram_main", "–í—Å–µ —Å–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            log_func("ERROR", "telegram_main", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–º–º–∞—Ä–∏")
    
    return success

def process_single_url(config: Dict[str, Any], log_func=None) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    
    Args:
        config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        log_func: —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    task = url_queue.url_queue.get_next_url()
    
    if not task:
        return False  # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
    
    if log_func:
        log_func("INFO", "telegram_main", "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏", 
                task_id=task.task_id, url=task.url, source=task.source)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        result = yt_processor.process_youtube_url(task.url, config, log_func)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            final_msg = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Notion"
            telegram_output.send_telegram_message(config, task.source, final_msg, log_func)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ Telegram
            summaries = result.get('summaries', {})
            if summaries:
                send_telegram_summaries(config, task.source, summaries, 0, log_func)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            telegram_output.send_telegram_message(config, task.source, error_msg, log_func)
        
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        url_queue.url_queue.mark_completed(task.task_id)
        
        if log_func:
            if result['success']:
                log_func("INFO", "telegram_main", "–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", 
                        task_id=task.task_id, run_id=result.get('run_id'))
            else:
                log_func("ERROR", "telegram_main", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏", 
                        task_id=task.task_id, error=result.get('error'))
        
        return True
        
    except Exception as e:
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        url_queue.url_queue.mark_completed(task.task_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        telegram_output.send_telegram_message(config, task.source, error_msg, log_func)
        
        if log_func:
            log_func("ERROR", "telegram_main", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏", 
                    task_id=task.task_id, error=str(e))
        
        return True

def telegram_worker_loop(config: Dict[str, Any], log_func=None):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
    
    Args:
        config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        log_func: —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if log_func:
        log_func("INFO", "telegram_main", "–ó–∞–ø—É—Å–∫ Telegram worker loop")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot_username = config.get('telegram', {}).get('bot_username', '@YTDigest2Bot')
    
    print("ü§ñ YT_Sum Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì± –ë–æ—Ç: {bot_username}")
    print("üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ YouTube —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("üìä –ú–∞–∫—Å–∏–º—É–º –≤ –æ—á–µ—Ä–µ–¥–∏: 5 —Å—Å—ã–ª–æ–∫")
    print()
    
    last_update_id = 0
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            updates = telegram_input.get_telegram_updates(config, offset=last_update_id + 1)
            
            if not updates.get("ok"):
                time.sleep(1)
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            for update in updates.get("result", []):
                update_id = update.get("update_id", 0)
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã
                if update_id <= last_update_id:
                    continue
                
                last_update_id = update_id
                
                message = update.get("message", {})
                if not message.get("text"):
                    continue
                
                chat_id = message.get("chat", {}).get("id")
                text = message.get("text").strip()
                user = message.get("from", {})
                username = user.get("username", "unknown")
                
                if log_func:
                    log_func("INFO", "telegram_main", "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                            chat_id=chat_id, text=text, username=username)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º YouTube URL
                if not yt_processor.validate_youtube_url(text):
                    error_msg = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é YouTube —Å—Å—ã–ª–∫—É\n\n–ü—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=..."
                    telegram_output.send_telegram_message(config, chat_id, error_msg, log_func)
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –æ—á–µ—Ä–µ–¥—å
                queue_result = url_queue.url_queue.add_url(text, source=chat_id)
                
                if queue_result['success']:
                    # URL –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    video_id = yt_processor.extract_video_id(text)
                    confirm_msg = f"üì• –ü—Ä–∏–Ω—è—Ç–∞ —Å—Å—ã–ª–∫–∞: {text}\nüÜî –í–∏–¥–µ–æ: {video_id}\nüìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_result['position']}\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è..."
                    
                    telegram_output.send_telegram_message(config, chat_id, confirm_msg, log_func)
                    
                    if log_func:
                        log_func("INFO", "telegram_main", "URL –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å", 
                                task_id=queue_result['task_id'], position=queue_result['position'])
                else:
                    # –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
                    error_msg = f"üö´ {queue_result['message']}\n‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    telegram_output.send_telegram_message(config, chat_id, error_msg, log_func)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω—É
            queue_status = url_queue.url_queue.get_queue_status()
            if queue_status['queue_size'] > 0:
                if log_func:
                    log_func("INFO", "telegram_main", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                process_single_url(config, log_func)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            time.sleep(0.5)
            
        except KeyboardInterrupt:
            if log_func:
                log_func("INFO", "telegram_main", "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            break
        except Exception as e:
            if log_func:
                log_func("ERROR", "telegram_main", "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ", error=str(e))
            time.sleep(1)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ